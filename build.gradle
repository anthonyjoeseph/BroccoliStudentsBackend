apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'eclipse'
apply plugin: 'war'



version = '1.0'
def scalaVersion = '2.11.8'
def scalaMajVersion = '2.11'
def scalatraVersion = '2.5.0'
def archiveName = "BroccoliStudents"
war.archiveName = "${archiveName}.war"

def env_ = project.hasProperty("env") ? env : "dvp"

def dbUrl = this."${env_}.blinkmob.dbUrl"
def dbUser =  this."${env_}.blinkmob.dbUser"
def dbPassword = this."${env_}.blinkmob.dbPassword"

buildscript {
     repositories {
         mavenLocal()
         mavenCentral()
         jcenter()
         maven { url = 'http://dl.bintray.com/khoulaiz/gradle-plugins' }
    }

    dependencies {
        classpath 'com.h2database:h2:1.3.170'
        classpath 'org.flywaydb:flyway-gradle-plugin:3.2.1'
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.2.4'
		classpath 'org.akhikhl.gretty:gretty:+'
    }
}
apply plugin: 'org.akhikhl.gretty'
apply plugin: 'org.flywaydb.flyway'
configurations {
    provided
}

sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
}
eclipse.classpath.plusConfigurations += [configurations.provided]

repositories {
    mavenLocal()
    maven {
    	url "http://dl.bintray.com/scalaz/releases"
    	url "https://oss.sonatype.org/content/repositories/releases"
    }
    mavenCentral()
    jcenter()
}



dependencies {
    //from sbt
    compile "org.scala-lang:scala-library:${scalaVersion}"
    compile "org.scala-lang:scala-compiler:${scalaVersion}"
    compile "org.scalatra:scalatra_2.11:${scalatraVersion}"
	compile "org.scalatra:scalatra-scalate_2.11:${scalatraVersion}"
	compile "org.scalatra:scalatra-json_2.11:${scalatraVersion}"
	compile "org.scalatra:scalatra-auth_2.11:${scalatraVersion}"
	compile "org.json4s:json4s-jackson_2.11:3.5.2"
	compile "com.typesafe.play:anorm_2.11:2.5.3"
	compile "com.zaxxer:HikariCP:2.3.2"
	compile "mysql:mysql-connector-java:5.1.35"
	compile "com.jason-goodwin:authentikat-jwt_2.11:0.4.5"
    //compile 'com.github.pathikrit:better-files_2.11:3.0.0'
    
    //from tim
    compile "org.slf4j:slf4j-api:1.7.5"
    compile 'net.databinder.dispatch:dispatch-core_2.11:0.11.3'
    compile 'c3p0:c3p0:0.9.1.2'
    compile 'me.lessis:courier_2.11:0.1.3'
    compile 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'
	
    runtime 'ch.qos.logback:logback-classic:1.2.3'
    runtime 'org.codehaus.groovy:groovy:2.4.5'
	provided "javax.servlet:javax.servlet-api:3.1.0"
    
    testCompile "junit:junit:4.11"
    testCompile "org.scalatra:scalatra-specs2_2.11:${scalatraVersion}"
	
}

flyway {
    url = dbUrl
    user = dbUser
    password = dbPassword
    //schemas=["PUBLIC"]
}
test{
	//dependsOn "flywayMigrate"
}


compileScala {
    scalaCompileOptions.metaClass.useCompileDaemon = true
    logging.setLevel LogLevel.ERROR
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.metaClass.useAnt = false
}



task unzipWar(dependsOn: 'war', type: Copy) {
    def zipFile = file("build/libs/${war.archiveName}")
    def outputDir = file("docker/application/${archiveName}")
    outputDir.mkdirs()
    from zipTree(zipFile)
    into outputDir
}



task buildImage(dependsOn: 'unzipWar') {
    doLast{
        exec{
		    workingDir "docker"
		    commandLine "docker", "build", "--rm=true", "."
		    standardOutput = new ByteArrayOutputStream()
		    ext.buildName = {
		        return (standardOutput.toString() =~ /Successfully built (\w+)/)[0][1]
		    }
	    }
    }
}

task runImage(dependsOn: 'buildImage'){
    doLast{
        exec{
            workingDir "docker"
            commandLine "docker", "run", "-p", "3829:3829", "-e", "JAVA_OPTS=-DdbProps='/var/lib/tomcat/webapps/hikari.properties'", "${buildImage.buildName()}"
        }
    }
}

task tagImage(dependsOn: 'buildImage'){
	doLast{
		exec{
			workingDir "docker"
			commandLine "docker", "tag", "${buildImage.buildName()}"
		}
	}
}
